#ifndef TRACE_H
#define TRACE_H

/* This file is autogenerated by tracetool, do not edit. */

#include "qemu-common.h"

static inline void trace_g_malloc(size_t size, void *ptr)
{
}

static inline void trace_g_realloc(void *ptr, size_t size, void *newptr)
{
}

static inline void trace_g_free(void *ptr)
{
}

static inline void trace_qemu_memalign(size_t alignment, size_t size, void *ptr)
{
}

static inline void trace_qemu_vmalloc(size_t size, void *ptr)
{
}

static inline void trace_qemu_vfree(void *ptr)
{
}

static inline void trace_virtqueue_fill(void *vq, const void *elem, unsigned int len, unsigned int idx)
{
}

static inline void trace_virtqueue_flush(void *vq, unsigned int count)
{
}

static inline void trace_virtqueue_pop(void *vq, void *elem, unsigned int in_num, unsigned int out_num)
{
}

static inline void trace_virtio_queue_notify(void *vdev, int n, void *vq)
{
}

static inline void trace_virtio_irq(void *vq)
{
}

static inline void trace_virtio_notify(void *vdev, void *vq)
{
}

static inline void trace_virtio_set_status(void *vdev, uint8_t val)
{
}

static inline void trace_virtio_serial_send_control_event(unsigned int port, uint16_t event, uint16_t value)
{
}

static inline void trace_virtio_serial_throttle_port(unsigned int port, bool throttle)
{
}

static inline void trace_virtio_serial_handle_control_message(uint16_t event, uint16_t value)
{
}

static inline void trace_virtio_serial_handle_control_message_port(unsigned int port)
{
}

static inline void trace_virtio_console_flush_buf(unsigned int port, size_t len, ssize_t ret)
{
}

static inline void trace_virtio_console_chr_read(unsigned int port, int size)
{
}

static inline void trace_virtio_console_chr_event(unsigned int port, int event)
{
}

static inline void trace_bdrv_open_common(void *bs, const char *filename, int flags, const char *format_name)
{
}

static inline void trace_multiwrite_cb(void *mcb, int ret)
{
}

static inline void trace_bdrv_aio_multiwrite(void *mcb, int num_callbacks, int num_reqs)
{
}

static inline void trace_bdrv_aio_multiwrite_earlyfail(void *mcb)
{
}

static inline void trace_bdrv_aio_multiwrite_latefail(void *mcb, int i)
{
}

static inline void trace_bdrv_aio_discard(void *bs, int64_t sector_num, int nb_sectors, void *opaque)
{
}

static inline void trace_bdrv_aio_flush(void *bs, void *opaque)
{
}

static inline void trace_bdrv_aio_readv(void *bs, int64_t sector_num, int nb_sectors, void *opaque)
{
}

static inline void trace_bdrv_aio_writev(void *bs, int64_t sector_num, int nb_sectors, void *opaque)
{
}

static inline void trace_bdrv_lock_medium(void *bs, bool locked)
{
}

static inline void trace_bdrv_co_readv(void *bs, int64_t sector_num, int nb_sector)
{
}

static inline void trace_bdrv_co_writev(void *bs, int64_t sector_num, int nb_sector)
{
}

static inline void trace_bdrv_co_io_em(void *bs, int64_t sector_num, int nb_sectors, int is_write, void *acb)
{
}

static inline void trace_virtio_blk_req_complete(void *req, int status)
{
}

static inline void trace_virtio_blk_rw_complete(void *req, int ret)
{
}

static inline void trace_virtio_blk_handle_write(void *req, uint64_t sector, size_t nsectors)
{
}

static inline void trace_paio_submit(void *acb, void *opaque, int64_t sector_num, int nb_sectors, int type)
{
}

static inline void trace_paio_complete(void *acb, void *opaque, int ret)
{
}

static inline void trace_paio_cancel(void *acb, void *opaque)
{
}

static inline void trace_cpu_in(unsigned int addr, unsigned int val)
{
}

static inline void trace_cpu_out(unsigned int addr, unsigned int val)
{
}

static inline void trace_balloon_event(void *opaque, unsigned long addr)
{
}

static inline void trace_apic_local_deliver(int vector, uint32_t lvt)
{
}

static inline void trace_apic_deliver_irq(uint8_t dest, uint8_t dest_mode, uint8_t delivery_mode, uint8_t vector_num, uint8_t trigger_mode)
{
}

static inline void trace_cpu_set_apic_base(uint64_t val)
{
}

static inline void trace_cpu_get_apic_base(uint64_t val)
{
}

static inline void trace_apic_mem_readl(uint64_t addr, uint32_t val)
{
}

static inline void trace_apic_mem_writel(uint64_t addr, uint32_t val)
{
}

static inline void trace_apic_reset_irq_delivered(int apic_irq_delivered)
{
}

static inline void trace_apic_get_irq_delivered(int apic_irq_delivered)
{
}

static inline void trace_apic_set_irq(int apic_irq_delivered)
{
}

static inline void trace_cs4231_mem_readl_dreg(uint32_t reg, uint32_t ret)
{
}

static inline void trace_cs4231_mem_readl_reg(uint32_t reg, uint32_t ret)
{
}

static inline void trace_cs4231_mem_writel_reg(uint32_t reg, uint32_t old, uint32_t val)
{
}

static inline void trace_cs4231_mem_writel_dreg(uint32_t reg, uint32_t old, uint32_t val)
{
}

static inline void trace_nvram_read(uint32_t addr, uint32_t ret)
{
}

static inline void trace_nvram_write(uint32_t addr, uint32_t old, uint32_t val)
{
}

static inline void trace_ecc_mem_writel_mer(uint32_t val)
{
}

static inline void trace_ecc_mem_writel_mdr(uint32_t val)
{
}

static inline void trace_ecc_mem_writel_mfsr(uint32_t val)
{
}

static inline void trace_ecc_mem_writel_vcr(uint32_t val)
{
}

static inline void trace_ecc_mem_writel_dr(uint32_t val)
{
}

static inline void trace_ecc_mem_writel_ecr0(uint32_t val)
{
}

static inline void trace_ecc_mem_writel_ecr1(uint32_t val)
{
}

static inline void trace_ecc_mem_readl_mer(uint32_t ret)
{
}

static inline void trace_ecc_mem_readl_mdr(uint32_t ret)
{
}

static inline void trace_ecc_mem_readl_mfsr(uint32_t ret)
{
}

static inline void trace_ecc_mem_readl_vcr(uint32_t ret)
{
}

static inline void trace_ecc_mem_readl_mfar0(uint32_t ret)
{
}

static inline void trace_ecc_mem_readl_mfar1(uint32_t ret)
{
}

static inline void trace_ecc_mem_readl_dr(uint32_t ret)
{
}

static inline void trace_ecc_mem_readl_ecr0(uint32_t ret)
{
}

static inline void trace_ecc_mem_readl_ecr1(uint32_t ret)
{
}

static inline void trace_ecc_diag_mem_writeb(uint64_t addr, uint32_t val)
{
}

static inline void trace_ecc_diag_mem_readb(uint64_t addr, uint32_t ret)
{
}

static inline void trace_lance_mem_readw(uint64_t addr, uint32_t ret)
{
}

static inline void trace_lance_mem_writew(uint64_t addr, uint32_t val)
{
}

static inline void trace_slavio_intctl_mem_readl(uint32_t cpu, uint64_t addr, uint32_t ret)
{
}

static inline void trace_slavio_intctl_mem_writel(uint32_t cpu, uint64_t addr, uint32_t val)
{
}

static inline void trace_slavio_intctl_mem_writel_clear(uint32_t cpu, uint32_t val, uint32_t intreg_pending)
{
}

static inline void trace_slavio_intctl_mem_writel_set(uint32_t cpu, uint32_t val, uint32_t intreg_pending)
{
}

static inline void trace_slavio_intctlm_mem_readl(uint64_t addr, uint32_t ret)
{
}

static inline void trace_slavio_intctlm_mem_writel(uint64_t addr, uint32_t val)
{
}

static inline void trace_slavio_intctlm_mem_writel_enable(uint32_t val, uint32_t intregm_disabled)
{
}

static inline void trace_slavio_intctlm_mem_writel_disable(uint32_t val, uint32_t intregm_disabled)
{
}

static inline void trace_slavio_intctlm_mem_writel_target(uint32_t cpu)
{
}

static inline void trace_slavio_check_interrupts(uint32_t pending, uint32_t intregm_disabled)
{
}

static inline void trace_slavio_set_irq(uint32_t target_cpu, int irq, uint32_t pil, int level)
{
}

static inline void trace_slavio_set_timer_irq_cpu(int cpu, int level)
{
}

static inline void trace_slavio_misc_update_irq_raise(void)
{
}

static inline void trace_slavio_misc_update_irq_lower(void)
{
}

static inline void trace_slavio_set_power_fail(int power_failing, uint8_t config)
{
}

static inline void trace_slavio_cfg_mem_writeb(uint32_t val)
{
}

static inline void trace_slavio_cfg_mem_readb(uint32_t ret)
{
}

static inline void trace_slavio_diag_mem_writeb(uint32_t val)
{
}

static inline void trace_slavio_diag_mem_readb(uint32_t ret)
{
}

static inline void trace_slavio_mdm_mem_writeb(uint32_t val)
{
}

static inline void trace_slavio_mdm_mem_readb(uint32_t ret)
{
}

static inline void trace_slavio_aux1_mem_writeb(uint32_t val)
{
}

static inline void trace_slavio_aux1_mem_readb(uint32_t ret)
{
}

static inline void trace_slavio_aux2_mem_writeb(uint32_t val)
{
}

static inline void trace_slavio_aux2_mem_readb(uint32_t ret)
{
}

static inline void trace_apc_mem_writeb(uint32_t val)
{
}

static inline void trace_apc_mem_readb(uint32_t ret)
{
}

static inline void trace_slavio_sysctrl_mem_writel(uint32_t val)
{
}

static inline void trace_slavio_sysctrl_mem_readl(uint32_t ret)
{
}

static inline void trace_slavio_led_mem_writew(uint32_t val)
{
}

static inline void trace_slavio_led_mem_readw(uint32_t ret)
{
}

static inline void trace_slavio_timer_get_out(uint64_t limit, uint32_t counthigh, uint32_t count)
{
}

static inline void trace_slavio_timer_irq(uint32_t counthigh, uint32_t count)
{
}

static inline void trace_slavio_timer_mem_readl_invalid(uint64_t addr)
{
}

static inline void trace_slavio_timer_mem_readl(uint64_t addr, uint32_t ret)
{
}

static inline void trace_slavio_timer_mem_writel(uint64_t addr, uint32_t val)
{
}

static inline void trace_slavio_timer_mem_writel_limit(unsigned int timer_index, uint64_t count)
{
}

static inline void trace_slavio_timer_mem_writel_counter_invalid(void)
{
}

static inline void trace_slavio_timer_mem_writel_status_start(unsigned int timer_index)
{
}

static inline void trace_slavio_timer_mem_writel_status_stop(unsigned int timer_index)
{
}

static inline void trace_slavio_timer_mem_writel_mode_user(unsigned int timer_index)
{
}

static inline void trace_slavio_timer_mem_writel_mode_counter(unsigned int timer_index)
{
}

static inline void trace_slavio_timer_mem_writel_mode_invalid(void)
{
}

static inline void trace_slavio_timer_mem_writel_invalid(uint64_t addr)
{
}

static inline void trace_ledma_memory_read(uint64_t addr)
{
}

static inline void trace_ledma_memory_write(uint64_t addr)
{
}

static inline void trace_sparc32_dma_set_irq_raise(void)
{
}

static inline void trace_sparc32_dma_set_irq_lower(void)
{
}

static inline void trace_espdma_memory_read(uint32_t addr)
{
}

static inline void trace_espdma_memory_write(uint32_t addr)
{
}

static inline void trace_sparc32_dma_mem_readl(uint64_t addr, uint32_t ret)
{
}

static inline void trace_sparc32_dma_mem_writel(uint64_t addr, uint32_t old, uint32_t val)
{
}

static inline void trace_sparc32_dma_enable_raise(void)
{
}

static inline void trace_sparc32_dma_enable_lower(void)
{
}

static inline void trace_sun4m_cpu_interrupt(unsigned int level)
{
}

static inline void trace_sun4m_cpu_reset_interrupt(unsigned int level)
{
}

static inline void trace_sun4m_cpu_set_irq_raise(int level)
{
}

static inline void trace_sun4m_cpu_set_irq_lower(int level)
{
}

static inline void trace_sun4m_iommu_mem_readl(uint64_t addr, uint32_t ret)
{
}

static inline void trace_sun4m_iommu_mem_writel(uint64_t addr, uint32_t val)
{
}

static inline void trace_sun4m_iommu_mem_writel_ctrl(uint64_t iostart)
{
}

static inline void trace_sun4m_iommu_mem_writel_tlbflush(uint32_t val)
{
}

static inline void trace_sun4m_iommu_mem_writel_pgflush(uint32_t val)
{
}

static inline void trace_sun4m_iommu_page_get_flags(uint64_t pa, uint64_t iopte, uint32_t ret)
{
}

static inline void trace_sun4m_iommu_translate_pa(uint64_t addr, uint64_t pa, uint32_t iopte)
{
}

static inline void trace_sun4m_iommu_bad_addr(uint64_t addr)
{
}

static inline void trace_usb_port_claim(int bus, const char *port)
{
}

static inline void trace_usb_port_attach(int bus, const char *port)
{
}

static inline void trace_usb_port_detach(int bus, const char *port)
{
}

static inline void trace_usb_port_release(int bus, const char *port)
{
}

static inline void trace_usb_ehci_reset(void)
{
}

static inline void trace_usb_ehci_mmio_readl(uint32_t addr, const char *str, uint32_t val)
{
}

static inline void trace_usb_ehci_mmio_writel(uint32_t addr, const char *str, uint32_t val)
{
}

static inline void trace_usb_ehci_mmio_change(uint32_t addr, const char *str, uint32_t new, uint32_t old)
{
}

static inline void trace_usb_ehci_usbsts(const char *sts, int state)
{
}

static inline void trace_usb_ehci_state(const char *schedule, const char *state)
{
}

static inline void trace_usb_ehci_qh_ptrs(void *q, uint32_t addr, uint32_t nxt, uint32_t c_qtd, uint32_t n_qtd, uint32_t a_qtd)
{
}

static inline void trace_usb_ehci_qh_fields(uint32_t addr, int rl, int mplen, int eps, int ep, int devaddr)
{
}

static inline void trace_usb_ehci_qh_bits(uint32_t addr, int c, int h, int dtc, int i)
{
}

static inline void trace_usb_ehci_qtd_ptrs(void *q, uint32_t addr, uint32_t nxt, uint32_t altnext)
{
}

static inline void trace_usb_ehci_qtd_fields(uint32_t addr, int tbytes, int cpage, int cerr, int pid)
{
}

static inline void trace_usb_ehci_qtd_bits(uint32_t addr, int ioc, int active, int halt, int babble, int xacterr)
{
}

static inline void trace_usb_ehci_itd(uint32_t addr, uint32_t nxt, uint32_t mplen, uint32_t mult, uint32_t ep, uint32_t devaddr)
{
}

static inline void trace_usb_ehci_sitd(uint32_t addr, uint32_t nxt, uint32_t active)
{
}

static inline void trace_usb_ehci_port_attach(uint32_t port, const char *device)
{
}

static inline void trace_usb_ehci_port_detach(uint32_t port)
{
}

static inline void trace_usb_ehci_port_reset(uint32_t port, int enable)
{
}

static inline void trace_usb_ehci_data(int rw, uint32_t cpage, uint32_t offset, uint32_t addr, uint32_t len, uint32_t bufpos)
{
}

static inline void trace_usb_ehci_queue_action(void *q, const char *action)
{
}

static inline void trace_usb_desc_device(int addr, int len, int ret)
{
}

static inline void trace_usb_desc_device_qualifier(int addr, int len, int ret)
{
}

static inline void trace_usb_desc_config(int addr, int index, int len, int ret)
{
}

static inline void trace_usb_desc_other_speed_config(int addr, int index, int len, int ret)
{
}

static inline void trace_usb_desc_string(int addr, int index, int len, int ret)
{
}

static inline void trace_usb_set_addr(int addr)
{
}

static inline void trace_usb_set_config(int addr, int config, int ret)
{
}

static inline void trace_usb_clear_device_feature(int addr, int feature, int ret)
{
}

static inline void trace_usb_set_device_feature(int addr, int feature, int ret)
{
}

static inline void trace_usb_host_open_started(int bus, int addr)
{
}

static inline void trace_usb_host_open_success(int bus, int addr)
{
}

static inline void trace_usb_host_open_failure(int bus, int addr)
{
}

static inline void trace_usb_host_disconnect(int bus, int addr)
{
}

static inline void trace_usb_host_close(int bus, int addr)
{
}

static inline void trace_usb_host_set_address(int bus, int addr, int config)
{
}

static inline void trace_usb_host_set_config(int bus, int addr, int config)
{
}

static inline void trace_usb_host_set_interface(int bus, int addr, int interface, int alt)
{
}

static inline void trace_usb_host_claim_interfaces(int bus, int addr, int config, int nif)
{
}

static inline void trace_usb_host_release_interfaces(int bus, int addr)
{
}

static inline void trace_usb_host_req_control(int bus, int addr, int req, int value, int index)
{
}

static inline void trace_usb_host_req_data(int bus, int addr, int in, int ep, int size)
{
}

static inline void trace_usb_host_req_complete(int bus, int addr, int status)
{
}

static inline void trace_usb_host_urb_submit(int bus, int addr, void *aurb, int length, int more)
{
}

static inline void trace_usb_host_urb_complete(int bus, int addr, void *aurb, int status, int length, int more)
{
}

static inline void trace_usb_host_ep_set_halt(int bus, int addr, int ep)
{
}

static inline void trace_usb_host_ep_clear_halt(int bus, int addr, int ep)
{
}

static inline void trace_usb_host_ep_start_iso(int bus, int addr, int ep)
{
}

static inline void trace_usb_host_ep_stop_iso(int bus, int addr, int ep)
{
}

static inline void trace_usb_host_reset(int bus, int addr)
{
}

static inline void trace_usb_host_auto_scan_enabled(void)
{
}

static inline void trace_usb_host_auto_scan_disabled(void)
{
}

static inline void trace_usb_host_claim_port(int bus, int hub, int port)
{
}

static inline void trace_scsi_req_alloc(int target, int lun, int tag)
{
}

static inline void trace_scsi_req_data(int target, int lun, int tag, int len)
{
}

static inline void trace_scsi_req_data_canceled(int target, int lun, int tag, int len)
{
}

static inline void trace_scsi_req_dequeue(int target, int lun, int tag)
{
}

static inline void trace_scsi_req_continue(int target, int lun, int tag)
{
}

static inline void trace_scsi_req_parsed(int target, int lun, int tag, int cmd, int mode, int xfer)
{
}

static inline void trace_scsi_req_parsed_lba(int target, int lun, int tag, int cmd, uint64_t lba)
{
}

static inline void trace_scsi_req_parse_bad(int target, int lun, int tag, int cmd)
{
}

static inline void trace_scsi_req_build_sense(int target, int lun, int tag, int key, int asc, int ascq)
{
}

static inline void trace_scsi_report_luns(int target, int lun, int tag)
{
}

static inline void trace_scsi_inquiry(int target, int lun, int tag, int cdb1, int cdb2)
{
}

static inline void trace_scsi_test_unit_ready(int target, int lun, int tag)
{
}

static inline void trace_scsi_request_sense(int target, int lun, int tag)
{
}

static inline void trace_vm_state_notify(int running, int reason)
{
}

static inline void trace_qed_alloc_l2_cache_entry(void *l2_cache, void *entry)
{
}

static inline void trace_qed_unref_l2_cache_entry(void *entry, int ref)
{
}

static inline void trace_qed_find_l2_cache_entry(void *l2_cache, void *entry, uint64_t offset, int ref)
{
}

static inline void trace_qed_read_table(void *s, uint64_t offset, void *table)
{
}

static inline void trace_qed_read_table_cb(void *s, void *table, int ret)
{
}

static inline void trace_qed_write_table(void *s, uint64_t offset, void *table, unsigned int index, unsigned int n)
{
}

static inline void trace_qed_write_table_cb(void *s, void *table, int flush, int ret)
{
}

static inline void trace_qed_need_check_timer_cb(void *s)
{
}

static inline void trace_qed_start_need_check_timer(void *s)
{
}

static inline void trace_qed_cancel_need_check_timer(void *s)
{
}

static inline void trace_qed_aio_complete(void *s, void *acb, int ret)
{
}

static inline void trace_qed_aio_setup(void *s, void *acb, int64_t sector_num, int nb_sectors, void *opaque, int is_write)
{
}

static inline void trace_qed_aio_next_io(void *s, void *acb, int ret, uint64_t cur_pos)
{
}

static inline void trace_qed_aio_read_data(void *s, void *acb, int ret, uint64_t offset, size_t len)
{
}

static inline void trace_qed_aio_write_data(void *s, void *acb, int ret, uint64_t offset, size_t len)
{
}

static inline void trace_qed_aio_write_prefill(void *s, void *acb, uint64_t start, size_t len, uint64_t offset)
{
}

static inline void trace_qed_aio_write_postfill(void *s, void *acb, uint64_t start, size_t len, uint64_t offset)
{
}

static inline void trace_qed_aio_write_main(void *s, void *acb, int ret, uint64_t offset, size_t len)
{
}

static inline void trace_g364fb_read(uint64_t addr, uint32_t val)
{
}

static inline void trace_g364fb_write(uint64_t addr, uint32_t new)
{
}

static inline void trace_grlib_gptimer_enable(int id, uint32_t count)
{
}

static inline void trace_grlib_gptimer_disabled(int id, uint32_t config)
{
}

static inline void trace_grlib_gptimer_restart(int id, uint32_t reload)
{
}

static inline void trace_grlib_gptimer_set_scaler(uint32_t scaler, uint32_t freq)
{
}

static inline void trace_grlib_gptimer_hit(int id)
{
}

static inline void trace_grlib_gptimer_readl(int id, uint64_t addr, uint32_t val)
{
}

static inline void trace_grlib_gptimer_writel(int id, uint64_t addr, uint32_t val)
{
}

static inline void trace_grlib_irqmp_check_irqs(uint32_t pend, uint32_t force, uint32_t mask, uint32_t lvl1, uint32_t lvl2)
{
}

static inline void trace_grlib_irqmp_ack(int intno)
{
}

static inline void trace_grlib_irqmp_set_irq(int irq)
{
}

static inline void trace_grlib_irqmp_readl_unknown(uint64_t addr)
{
}

static inline void trace_grlib_irqmp_writel_unknown(uint64_t addr, uint32_t value)
{
}

static inline void trace_grlib_apbuart_event(int event)
{
}

static inline void trace_grlib_apbuart_writel_unknown(uint64_t addr, uint32_t value)
{
}

static inline void trace_leon3_set_irq(int intno)
{
}

static inline void trace_leon3_reset_irq(int intno)
{
}

static inline void trace_spice_vmc_write(ssize_t out, int len)
{
}

static inline void trace_spice_vmc_read(int bytes, int len)
{
}

static inline void trace_spice_vmc_register_interface(void *scd)
{
}

static inline void trace_spice_vmc_unregister_interface(void *scd)
{
}

static inline void trace_lm32_pic_raise_irq(void)
{
}

static inline void trace_lm32_pic_lower_irq(void)
{
}

static inline void trace_lm32_pic_interrupt(int irq, int level)
{
}

static inline void trace_lm32_pic_set_im(uint32_t im)
{
}

static inline void trace_lm32_pic_set_ip(uint32_t ip)
{
}

static inline void trace_lm32_pic_get_im(uint32_t im)
{
}

static inline void trace_lm32_pic_get_ip(uint32_t ip)
{
}

static inline void trace_lm32_juart_get_jtx(uint32_t value)
{
}

static inline void trace_lm32_juart_set_jtx(uint32_t value)
{
}

static inline void trace_lm32_juart_get_jrx(uint32_t value)
{
}

static inline void trace_lm32_juart_set_jrx(uint32_t value)
{
}

static inline void trace_lm32_timer_memory_write(uint32_t addr, uint32_t value)
{
}

static inline void trace_lm32_timer_memory_read(uint32_t addr, uint32_t value)
{
}

static inline void trace_lm32_timer_hit(void)
{
}

static inline void trace_lm32_timer_irq_state(int level)
{
}

static inline void trace_lm32_uart_memory_write(uint32_t addr, uint32_t value)
{
}

static inline void trace_lm32_uart_memory_read(uint32_t addr, uint32_t value)
{
}

static inline void trace_lm32_uart_irq_state(int level)
{
}

static inline void trace_lm32_sys_memory_write(uint32_t addr, uint32_t value)
{
}

static inline void trace_milkymist_ac97_memory_read(uint32_t addr, uint32_t value)
{
}

static inline void trace_milkymist_ac97_memory_write(uint32_t addr, uint32_t value)
{
}

static inline void trace_milkymist_ac97_pulse_irq_crrequest(void)
{
}

static inline void trace_milkymist_ac97_pulse_irq_crreply(void)
{
}

static inline void trace_milkymist_ac97_pulse_irq_dmaw(void)
{
}

static inline void trace_milkymist_ac97_pulse_irq_dmar(void)
{
}

static inline void trace_milkymist_ac97_in_cb(int avail, uint32_t remaining)
{
}

static inline void trace_milkymist_ac97_in_cb_transferred(int transferred)
{
}

static inline void trace_milkymist_ac97_out_cb(int free, uint32_t remaining)
{
}

static inline void trace_milkymist_ac97_out_cb_transferred(int transferred)
{
}

static inline void trace_milkymist_hpdmc_memory_read(uint32_t addr, uint32_t value)
{
}

static inline void trace_milkymist_hpdmc_memory_write(uint32_t addr, uint32_t value)
{
}

static inline void trace_milkymist_memcard_memory_read(uint32_t addr, uint32_t value)
{
}

static inline void trace_milkymist_memcard_memory_write(uint32_t addr, uint32_t value)
{
}

static inline void trace_milkymist_minimac2_memory_read(uint32_t addr, uint32_t value)
{
}

static inline void trace_milkymist_minimac2_memory_write(uint32_t addr, uint32_t value)
{
}

static inline void trace_milkymist_minimac2_mdio_write(uint8_t phy_addr, uint8_t addr, uint16_t value)
{
}

static inline void trace_milkymist_minimac2_mdio_read(uint8_t phy_addr, uint8_t addr, uint16_t value)
{
}

static inline void trace_milkymist_minimac2_tx_frame(uint32_t length)
{
}

static inline void trace_milkymist_minimac2_rx_frame(const void *buf, uint32_t length)
{
}

static inline void trace_milkymist_minimac2_drop_rx_frame(const void *buf)
{
}

static inline void trace_milkymist_minimac2_rx_transfer(const void *buf, uint32_t length)
{
}

static inline void trace_milkymist_minimac2_raise_irq_rx(void)
{
}

static inline void trace_milkymist_minimac2_lower_irq_rx(void)
{
}

static inline void trace_milkymist_minimac2_pulse_irq_tx(void)
{
}

static inline void trace_milkymist_pfpu_memory_read(uint32_t addr, uint32_t value)
{
}

static inline void trace_milkymist_pfpu_memory_write(uint32_t addr, uint32_t value)
{
}

static inline void trace_milkymist_pfpu_vectout(uint32_t a, uint32_t b, uint32_t dma_ptr)
{
}

static inline void trace_milkymist_pfpu_pulse_irq(void)
{
}

static inline void trace_milkymist_softusb_memory_read(uint32_t addr, uint32_t value)
{
}

static inline void trace_milkymist_softusb_memory_write(uint32_t addr, uint32_t value)
{
}

static inline void trace_milkymist_softusb_mevt(uint8_t m)
{
}

static inline void trace_milkymist_softusb_kevt(uint8_t m)
{
}

static inline void trace_milkymist_softusb_mouse_event(int dx, int dy, int dz, int bs)
{
}

static inline void trace_milkymist_softusb_pulse_irq(void)
{
}

static inline void trace_milkymist_sysctl_memory_read(uint32_t addr, uint32_t value)
{
}

static inline void trace_milkymist_sysctl_memory_write(uint32_t addr, uint32_t value)
{
}

static inline void trace_milkymist_sysctl_icap_write(uint32_t value)
{
}

static inline void trace_milkymist_sysctl_start_timer0(void)
{
}

static inline void trace_milkymist_sysctl_stop_timer0(void)
{
}

static inline void trace_milkymist_sysctl_start_timer1(void)
{
}

static inline void trace_milkymist_sysctl_stop_timer1(void)
{
}

static inline void trace_milkymist_sysctl_pulse_irq_timer0(void)
{
}

static inline void trace_milkymist_sysctl_pulse_irq_timer1(void)
{
}

static inline void trace_milkymist_tmu2_memory_read(uint32_t addr, uint32_t value)
{
}

static inline void trace_milkymist_tmu2_memory_write(uint32_t addr, uint32_t value)
{
}

static inline void trace_milkymist_tmu2_start(void)
{
}

static inline void trace_milkymist_tmu2_pulse_irq(void)
{
}

static inline void trace_milkymist_uart_memory_read(uint32_t addr, uint32_t value)
{
}

static inline void trace_milkymist_uart_memory_write(uint32_t addr, uint32_t value)
{
}

static inline void trace_milkymist_uart_raise_irq(void)
{
}

static inline void trace_milkymist_uart_lower_irq(void)
{
}

static inline void trace_milkymist_vgafb_memory_read(uint32_t addr, uint32_t value)
{
}

static inline void trace_milkymist_vgafb_memory_write(uint32_t addr, uint32_t value)
{
}

static inline void trace_mipsnet_send(uint32_t size)
{
}

static inline void trace_mipsnet_receive(uint32_t size)
{
}

static inline void trace_mipsnet_read(uint64_t addr, uint32_t val)
{
}

static inline void trace_mipsnet_write(uint64_t addr, uint64_t val)
{
}

static inline void trace_mipsnet_irq(uint32_t isr, uint32_t intctl)
{
}

static inline void trace_xen_ram_alloc(unsigned long ram_addr, unsigned long size)
{
}

static inline void trace_xen_client_set_memory(uint64_t start_addr, unsigned long size, unsigned long phys_offset, bool log_dirty)
{
}

static inline void trace_xen_map_cache(uint64_t phys_addr)
{
}

static inline void trace_xen_remap_bucket(uint64_t index)
{
}

static inline void trace_xen_map_cache_return(void* ptr)
{
}

static inline void trace_xen_map_block(uint64_t phys_addr, uint64_t size)
{
}

static inline void trace_xen_unmap_block(void* addr, unsigned long size)
{
}

static inline void trace_qemu_put_ram_ptr(void* addr)
{
}

static inline void trace_xen_platform_log(char *s)
{
}

static inline void trace_qemu_coroutine_enter(void *from, void *to, void *opaque)
{
}

static inline void trace_qemu_coroutine_yield(void *from, void *to)
{
}

static inline void trace_qemu_coroutine_terminate(void *co)
{
}

static inline void trace_qemu_co_queue_next_bh(void)
{
}

static inline void trace_qemu_co_queue_next(void *next)
{
}

static inline void trace_qemu_co_mutex_lock_entry(void *mutex, void *self)
{
}

static inline void trace_qemu_co_mutex_lock_return(void *mutex, void *self)
{
}

static inline void trace_qemu_co_mutex_unlock_entry(void *mutex, void *self)
{
}

static inline void trace_qemu_co_mutex_unlock_return(void *mutex, void *self)
{
}

static inline void trace_escc_put_queue(char channel, int b)
{
}

static inline void trace_escc_get_queue(char channel, int val)
{
}

static inline void trace_escc_update_irq(int irq)
{
}

static inline void trace_escc_update_parameters(char channel, int speed, int parity, int data_bits, int stop_bits)
{
}

static inline void trace_escc_mem_writeb_ctrl(char channel, uint32_t reg, uint32_t val)
{
}

static inline void trace_escc_mem_writeb_data(char channel, uint32_t val)
{
}

static inline void trace_escc_mem_readb_ctrl(char channel, uint32_t reg, uint8_t val)
{
}

static inline void trace_escc_mem_readb_data(char channel, uint32_t ret)
{
}

static inline void trace_escc_serial_receive_byte(char channel, int ch)
{
}

static inline void trace_escc_sunkbd_event_in(int ch)
{
}

static inline void trace_escc_sunkbd_event_out(int ch)
{
}

static inline void trace_escc_kbd_command(int val)
{
}

static inline void trace_escc_sunmouse_event(int dx, int dy, int buttons_state)
{
}

static inline void trace_iscsi_aio_write10_cb(void *iscsi, int status, void *acb, int canceled)
{
}

static inline void trace_iscsi_aio_writev(void *iscsi, int64_t sector_num, int nb_sectors, void *opaque, void *acb)
{
}

static inline void trace_iscsi_aio_read10_cb(void *iscsi, int status, void *acb, int canceled)
{
}

static inline void trace_iscsi_aio_readv(void *iscsi, int64_t sector_num, int nb_sectors, void *opaque, void *acb)
{
}

static inline void trace_esp_raise_irq(void)
{
}

static inline void trace_esp_lower_irq(void)
{
}

static inline void trace_esp_dma_enable(void)
{
}

static inline void trace_esp_dma_disable(void)
{
}

static inline void trace_esp_get_cmd(uint32_t dmalen, int target)
{
}

static inline void trace_esp_do_busid_cmd(uint8_t busid)
{
}

static inline void trace_esp_handle_satn_stop(uint32_t cmdlen)
{
}

static inline void trace_esp_write_response(uint32_t status)
{
}

static inline void trace_esp_do_dma(uint32_t cmdlen, uint32_t len)
{
}

static inline void trace_esp_command_complete(void)
{
}

static inline void trace_esp_command_complete_unexpected(void)
{
}

static inline void trace_esp_command_complete_fail(void)
{
}

static inline void trace_esp_transfer_data(uint32_t dma_left, int32_t ti_size)
{
}

static inline void trace_esp_handle_ti(uint32_t minlen)
{
}

static inline void trace_esp_handle_ti_cmd(uint32_t cmdlen)
{
}

static inline void trace_esp_mem_readb(uint32_t saddr, uint8_t reg)
{
}

static inline void trace_esp_mem_writeb(uint32_t saddr, uint8_t reg, uint32_t val)
{
}

static inline void trace_esp_mem_writeb_cmd_nop(uint32_t val)
{
}

static inline void trace_esp_mem_writeb_cmd_flush(uint32_t val)
{
}

static inline void trace_esp_mem_writeb_cmd_reset(uint32_t val)
{
}

static inline void trace_esp_mem_writeb_cmd_bus_reset(uint32_t val)
{
}

static inline void trace_esp_mem_writeb_cmd_iccs(uint32_t val)
{
}

static inline void trace_esp_mem_writeb_cmd_msgacc(uint32_t val)
{
}

static inline void trace_esp_mem_writeb_cmd_pad(uint32_t val)
{
}

static inline void trace_esp_mem_writeb_cmd_satn(uint32_t val)
{
}

static inline void trace_esp_mem_writeb_cmd_sel(uint32_t val)
{
}

static inline void trace_esp_mem_writeb_cmd_selatn(uint32_t val)
{
}

static inline void trace_esp_mem_writeb_cmd_selatns(uint32_t val)
{
}

static inline void trace_esp_mem_writeb_cmd_ensel(uint32_t val)
{
}

static inline void trace_handle_qmp_command(void *mon, const char *cmd_name)
{
}

static inline void trace_monitor_protocol_emitter(void *mon)
{
}

static inline void trace_open_eth_mii_write(unsigned idx, uint16_t v)
{
}

static inline void trace_open_eth_mii_read(unsigned idx, uint16_t v)
{
}

static inline void trace_open_eth_update_irq(uint32_t v)
{
}

static inline void trace_open_eth_receive(unsigned len)
{
}

static inline void trace_open_eth_receive_mcast(unsigned idx, uint32_t h0, uint32_t h1)
{
}

static inline void trace_open_eth_receive_reject(void)
{
}

static inline void trace_open_eth_receive_desc(uint32_t addr, uint32_t len_flags)
{
}

static inline void trace_open_eth_start_xmit(uint32_t addr, unsigned len, unsigned tx_len)
{
}

static inline void trace_open_eth_reg_read(uint32_t addr, uint32_t v)
{
}

static inline void trace_open_eth_reg_write(uint32_t addr, uint32_t v)
{
}

static inline void trace_open_eth_desc_read(uint32_t addr, uint32_t v)
{
}

static inline void trace_open_eth_desc_write(uint32_t addr, uint32_t v)
{
}

static inline void trace_v9fs_rerror(uint16_t tag, uint8_t id, int err)
{
}

static inline void trace_v9fs_version(uint16_t tag, uint8_t id, int32_t msize, char* version)
{
}

static inline void trace_v9fs_version_return(uint16_t tag, uint8_t id, int32_t msize, char* version)
{
}

static inline void trace_v9fs_attach(uint16_t tag, uint8_t id, int32_t fid, int32_t afid, char* uname, char* aname)
{
}

static inline void trace_v9fs_attach_return(uint16_t tag, uint8_t id, int8_t type, int32_t version, int64_t path)
{
}

static inline void trace_v9fs_stat(uint16_t tag, uint8_t id, int32_t fid)
{
}

static inline void trace_v9fs_stat_return(uint16_t tag, uint8_t id, int32_t mode, int32_t atime, int32_t mtime, int64_t length)
{
}

static inline void trace_v9fs_getattr(uint16_t tag, uint8_t id, int32_t fid, uint64_t request_mask)
{
}

static inline void trace_v9fs_getattr_return(uint16_t tag, uint8_t id, uint64_t result_mask, uint32_t mode, uint32_t uid, uint32_t gid)
{
}

static inline void trace_v9fs_walk(uint16_t tag, uint8_t id, int32_t fid, int32_t newfid, uint16_t nwnames)
{
}

static inline void trace_v9fs_walk_return(uint16_t tag, uint8_t id, uint16_t nwnames, void* qids)
{
}

static inline void trace_v9fs_open(uint16_t tag, uint8_t id, int32_t fid, int32_t mode)
{
}

static inline void trace_v9fs_open_return(uint16_t tag, uint8_t id, int8_t type, int32_t version, int64_t path, int iounit)
{
}

static inline void trace_v9fs_lcreate(uint16_t tag, uint8_t id, int32_t dfid, int32_t flags, int32_t mode, uint32_t gid)
{
}

static inline void trace_v9fs_lcreate_return(uint16_t tag, uint8_t id, int8_t type, int32_t version, int64_t path, int32_t iounit)
{
}

static inline void trace_v9fs_fsync(uint16_t tag, uint8_t id, int32_t fid, int datasync)
{
}

static inline void trace_v9fs_clunk(uint16_t tag, uint8_t id, int32_t fid)
{
}

static inline void trace_v9fs_read(uint16_t tag, uint8_t id, int32_t fid, int64_t off, int32_t max_count)
{
}

static inline void trace_v9fs_read_return(uint16_t tag, uint8_t id, int32_t count, ssize_t err)
{
}

static inline void trace_v9fs_readdir(uint16_t tag, uint8_t id, int32_t fid, int64_t offset, int32_t max_count)
{
}

static inline void trace_v9fs_readdir_return(uint16_t tag, uint8_t id, int32_t count, ssize_t retval)
{
}

static inline void trace_v9fs_write(uint16_t tag, uint8_t id, int32_t fid, int64_t off, int32_t count, int cnt)
{
}

static inline void trace_v9fs_write_return(uint16_t tag, uint8_t id, int32_t total, ssize_t err)
{
}

static inline void trace_v9fs_create(uint16_t tag, uint8_t id, int32_t fid, char* name, int32_t perm, int8_t mode)
{
}

static inline void trace_v9fs_create_return(uint16_t tag, uint8_t id, int8_t type, int32_t version, int64_t path, int iounit)
{
}

static inline void trace_v9fs_symlink(uint16_t tag, uint8_t id, int32_t fid,  char* name, char* symname, uint32_t gid)
{
}

static inline void trace_v9fs_symlink_return(uint16_t tag, uint8_t id, int8_t type, int32_t version, int64_t path)
{
}

static inline void trace_v9fs_flush(uint16_t tag, uint8_t id, int16_t flush_tag)
{
}

static inline void trace_v9fs_link(uint16_t tag, uint8_t id, int32_t dfid, int32_t oldfid, char* name)
{
}

static inline void trace_v9fs_remove(uint16_t tag, uint8_t id, int32_t fid)
{
}

static inline void trace_v9fs_wstat(uint16_t tag, uint8_t id, int32_t fid, int32_t mode, int32_t atime, int32_t mtime)
{
}

static inline void trace_v9fs_mknod(uint16_t tag, uint8_t id, int32_t fid, int mode, int major, int minor)
{
}

static inline void trace_v9fs_mknod_return(uint16_t tag, uint8_t id, int8_t type, int32_t version, int64_t path)
{
}

static inline void trace_v9fs_lock(uint16_t tag, uint8_t id, int32_t fid, uint8_t type, uint64_t start, uint64_t length)
{
}

static inline void trace_v9fs_lock_return(uint16_t tag, uint8_t id, int8_t status)
{
}

static inline void trace_v9fs_getlock(uint16_t tag, uint8_t id, int32_t fid, uint8_t type, uint64_t start, uint64_t length)
{
}

static inline void trace_v9fs_getlock_return(uint16_t tag, uint8_t id, uint8_t type, uint64_t start, uint64_t length, uint32_t proc_id)
{
}

static inline void trace_v9fs_mkdir(uint16_t tag, uint8_t id, int32_t fid, char* name, int mode, uint32_t gid)
{
}

static inline void trace_v9fs_mkdir_return(uint16_t tag, uint8_t id, int8_t type, int32_t version, int64_t path, int err)
{
}

static inline void trace_v9fs_xattrwalk(uint16_t tag, uint8_t id, int32_t fid, int32_t newfid, char* name)
{
}

static inline void trace_v9fs_xattrwalk_return(uint16_t tag, uint8_t id, int64_t size)
{
}

static inline void trace_v9fs_xattrcreate(uint16_t tag, uint8_t id, int32_t fid, char* name, int64_t size, int flags)
{
}

static inline void trace_v9fs_readlink(uint16_t tag, uint8_t id, int32_t fid)
{
}

static inline void trace_v9fs_readlink_return(uint16_t tag, uint8_t id, char* target)
{
}

static inline void trace_mmu_helper_dfault(uint64_t address, uint64_t context, int mmu_idx, uint32_t tl)
{
}

static inline void trace_mmu_helper_dprot(uint64_t address, uint64_t context, int mmu_idx, uint32_t tl)
{
}

static inline void trace_mmu_helper_dmiss(uint64_t address, uint64_t context)
{
}

static inline void trace_mmu_helper_tfault(uint64_t address, uint64_t context)
{
}

static inline void trace_mmu_helper_tmiss(uint64_t address, uint64_t context)
{
}

static inline void trace_mmu_helper_get_phys_addr_code(uint32_t tl, int mmu_idx, uint64_t prim_context, uint64_t sec_context, uint64_t address)
{
}

static inline void trace_mmu_helper_get_phys_addr_data(uint32_t tl, int mmu_idx, uint64_t prim_context, uint64_t sec_context, uint64_t address)
{
}

static inline void trace_mmu_helper_mmu_fault(uint64_t address, uint64_t paddr, int mmu_idx, uint32_t tl, uint64_t prim_context, uint64_t sec_context)
{
}

static inline void trace_int_helper_set_softint(uint32_t softint)
{
}

static inline void trace_int_helper_clear_softint(uint32_t softint)
{
}

static inline void trace_int_helper_write_softint(uint32_t softint)
{
}

static inline void trace_int_helper_icache_freeze(void)
{
}

static inline void trace_int_helper_dcache_freeze(void)
{
}

static inline void trace_win_helper_gregset_error(uint32_t pstate)
{
}

static inline void trace_win_helper_switch_pstate(uint32_t pstate_regs, uint32_t new_pstate_regs)
{
}

static inline void trace_win_helper_no_switch_pstate(uint32_t new_pstate_regs)
{
}

static inline void trace_win_helper_wrpil(uint32_t psrpil, uint32_t new_pil)
{
}

static inline void trace_win_helper_done(uint32_t tl)
{
}

static inline void trace_win_helper_retry(uint32_t tl)
{
}

#endif /* TRACE_H */
